#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

status $build_dir
status $cache_dir
status $env_dir

# Run subsequent node/npm commands from the build path
cd $build_dir

# # Scope config var availability only to `npm install`
# (
#   if [ -d "$env_dir" ]; then
#     status "Exporting config vars to environment"
#     export_env_dir $env_dir
#   fi

#   status "Installing dependencies"
#   # Make npm output to STDOUT instead of its default STDERR
#   npm install --userconfig $build_dir/.npmrc 2>&1 | indent
# )

# install sass / compass
status "Installing Sass / Compass"
export GEM_HOME=$build_dir/.gem/ruby/1.9.1
PATH="$GEM_HOME/bin:$PATH"
if test -d $cache_dir/ruby/.gem; then
  status "Restoring ruby gems directory from cache"
  cp -r $cache_dir/ruby/.gem $build_dir
  HOME=$build_dir gem update sass --user-install --no-rdoc --no-ri
  HOME=$build_dir gem update compass --user-install --no-rdoc --no-ri
else
  HOME=$build_dir gem install sass --user-install --no-rdoc --no-ri
  HOME=$build_dir gem install compass --user-install --no-rdoc --no-ri
fi

# cache ruby gems
rm -rf $cache_dir/ruby
mkdir -p $cache_dir/ruby

# If app has a gems directory, cache it.
if test -d $build_dir/.gem; then
  status "Caching ruby gems directory for future builds"
  cp -r $build_dir/.gem $cache_dir/ruby
fi

# Testing for gulp
is_gulpfile_present= [ -f $build_dir/gulpfile.js ];
if $is_gulpfile_present; then
  status "Found Gulpfile"
else
  status "No Gulpfile (gulpfile.js) found"
fi

# Check and run Gulp
(
  if $is_gulpfile_present; then
    status "Running gulp heroku:$NODE_ENV task"
    $build_dir/node_modules/.bin/gulp heroku
  fi
)

# Update the PATH
status "Building runtime environment"
mkdir -p $build_dir/.profile.d
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $build_dir/.profile.d/nodejs.sh

# Post package.json to nomnom service
# Use a subshell so failures won't break the build.
(
  curl \
    --data @$build_dir/package.json \
    --fail \
    --silent \
    --request POST \
    --header "content-type: application/json" \
    https://nomnom.heroku.com/?request_id=$REQUEST_ID \
    > /dev/null
) &
